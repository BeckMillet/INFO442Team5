{"ast":null,"code":"var _jsxFileName = \"/Users/beckmillet/Documents/INFO442/INFO442Team5/archive/my-app/src/Main.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Summary from './Summary';\nimport EntryForm from './EntryForm';\nimport HistoryCards from './HistoryCards';\nimport firebase from '../node_modules/firebase';\nimport 'firebase/database';\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addTransToApp = entry => {\n      let transactions = this.state.transactions;\n      transactions.unshift(entry);\n      /* Requirement 10 */\n\n      let sorted = transactions.sort((a, b) => {\n        return Date.parse(b.date) - Date.parse(a.date);\n      });\n      let id = 1;\n\n      for (let entry of sorted) {\n        entry.id = id;\n        id++;\n      }\n\n      let expensesToDate = Number(this.state.expensesToDate) + Number(entry.amountSpent);\n      /* firebase */\n\n      let currentUser = this.props.currentUser.displayName;\n      let userRef = firebase.database().ref(currentUser);\n      let transactionsRef = userRef.child('transactions');\n      transactionsRef.set(sorted);\n      let expensesToDateRef = userRef.child('expensesToDate');\n      expensesToDateRef.set(expensesToDate);\n      /* state */\n\n      this.setState({\n        transactions: sorted\n      });\n      this.setState({\n        expensesToDate: expensesToDate\n      });\n    };\n\n    this.handleBudgetChange = updates => {\n      /* firebase */\n      let currentUser = this.state.currentUser.displayName;\n      let userRef = firebase.database().ref(currentUser);\n      let lastDateChangedRef = userRef.child('lastDateChanged');\n      let dailyBudgetRef = userRef.child('dailyBudget');\n      lastDateChangedRef.set(updates.lastDateChanged);\n      dailyBudgetRef.set(updates.dailyBudget);\n      /* state */\n\n      this.setState({\n        lastDateChanged: updates.lastDateChanged\n      });\n      this.setState({\n        dailyBudget: updates.dailyBudget\n      });\n    };\n\n    this.state = {\n      currentUser: null,\n      lastDateChanged: '',\n      lastDateOpened: '',\n      dailyBudget: '',\n      budgetToDate: '',\n      expensesToDate: '',\n      transactions: []\n    };\n  }\n\n  componentDidMount() {\n    let currentUser = this.props.currentUser;\n    this.setState({\n      currentUser: currentUser\n    });\n    let userRef = firebase.database().ref(currentUser.displayName);\n    let lastDateOpenedRef = userRef.child('lastDateOpened');\n    let lastDateChangedRef = userRef.child('lastDateChanged');\n    let dailyBudgetRef = userRef.child('dailyBudget');\n    let budgetToDateRef = userRef.child('budgetToDate');\n    let expensesToDateRef = userRef.child('expensesToDate');\n    let transactionsRef = userRef.child('transactions');\n    lastDateOpenedRef.on('value', snapshot => {\n      //captures the values\n      let lastDateOpened = snapshot.val();\n      this.setState({\n        lastDateOpened: lastDateOpened\n      });\n    });\n    lastDateChangedRef.on('value', snapshot => {\n      //captures the values\n      let lastDateChanged = snapshot.val();\n      this.setState({\n        lastDateChanged: lastDateChanged\n      });\n    });\n    dailyBudgetRef.on('value', snapshot => {\n      //captures the values\n      let dailyBudget = snapshot.val();\n      this.setState({\n        dailyBudget: dailyBudget\n      });\n    });\n    budgetToDateRef.on('value', snapshot => {\n      //captures the values\n      let budgetToDate = snapshot.val();\n      this.setState({\n        budgetToDate: budgetToDate\n      });\n    });\n    expensesToDateRef.on('value', snapshot => {\n      //captures the values\n      let expensesToDate = snapshot.val();\n      this.setState({\n        expensesToDate: expensesToDate\n      });\n    });\n    transactionsRef.on('value', snapshot => {\n      if (snapshot.exists()) {\n        //captures the values\n        let transactions = snapshot.val(); //places the values into a local array\n\n        let localArr = Object.values(transactions);\n        this.setState({\n          transactions: localArr\n        });\n      }\n    });\n    this.calcBudgetToDate();\n  }\n\n  calcBudgetToDate() {\n    let currentUser = this.props.currentUser.displayName;\n    let userRef = firebase.database().ref(currentUser);\n    userRef.once(\"value\", snapshot => {\n      let today = new Date();\n      let lastOpened = new Date(this.state.lastDateOpened);\n\n      if (lastOpened.toLocaleDateString() !== today.toLocaleDateString()) {\n        /* caluculate days that have passed. I know its ugly. I hate it */\n        lastOpened = Date.UTC(lastOpened.getFullYear(), lastOpened.getMonth(), lastOpened.getDate());\n        let present = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate());\n        let oneDay = 1000 * 60 * 60 * 24;\n        let days = (present - oneDay - lastOpened) / oneDay;\n        /* calculates amount to add to budget to date */\n\n        let val = days * Number(this.state.dailyBudget) + Number(this.state.budgetToDate);\n        /* firebase */\n\n        let budgetToDateRef = userRef.child('budgetToDate');\n        let lastDateOpenedRef = userRef.child('lastDateOpened');\n        budgetToDateRef.set(val);\n        lastDateOpenedRef.set(today.toLocaleDateString());\n        /* state */\n\n        this.setState({\n          budgetToDate: val\n        });\n        this.setState({\n          lastDateOpened: today.toLocaleDateString()\n        });\n      }\n    });\n  }\n\n  render() {\n    //this.calcBudgetToDate()\n    let content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testcss\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Summary, {\n      lastDateChanged: this.state.lastDateChanged,\n      dailyBudget: this.state.dailyBudget,\n      budgetToDate: this.state.budgetToDate,\n      expensesToDate: this.state.expensesToDate,\n      handleBudgetChange: this.handleBudgetChange\n      /* calcBudgetToDate={this.calcBudgetToDate} */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(EntryForm, {\n      addTransToApp: this.addTransToApp,\n      dailyBudget: this.state.dailyBudget,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(HistoryCards, {\n      transactions: this.state.transactions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 18\n      }\n    }));\n    return content;\n  }\n\n}","map":{"version":3,"sources":["/Users/beckmillet/Documents/INFO442/INFO442Team5/archive/my-app/src/Main.js"],"names":["React","Component","Summary","EntryForm","HistoryCards","firebase","Main","constructor","props","addTransToApp","entry","transactions","state","unshift","sorted","sort","a","b","Date","parse","date","id","expensesToDate","Number","amountSpent","currentUser","displayName","userRef","database","ref","transactionsRef","child","set","expensesToDateRef","setState","handleBudgetChange","updates","lastDateChangedRef","dailyBudgetRef","lastDateChanged","dailyBudget","lastDateOpened","budgetToDate","componentDidMount","lastDateOpenedRef","budgetToDateRef","on","snapshot","val","exists","localArr","Object","values","calcBudgetToDate","once","today","lastOpened","toLocaleDateString","UTC","getFullYear","getMonth","getDate","present","oneDay","days","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport Summary from './Summary'\nimport EntryForm from './EntryForm'\nimport HistoryCards from './HistoryCards'\nimport firebase from '../node_modules/firebase';\nimport 'firebase/database';\n\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentUser: null,\n            lastDateChanged: '',\n            lastDateOpened: '',\n            dailyBudget: '',\n            budgetToDate: '',\n            expensesToDate: '',\n            transactions: []\n        };\n    }\n\n    componentDidMount() {\n        let currentUser = this.props.currentUser;\n        this.setState({ currentUser: currentUser })\n\n        let userRef = firebase.database().ref(currentUser.displayName);\n        let lastDateOpenedRef = userRef.child('lastDateOpened');\n        let lastDateChangedRef = userRef.child('lastDateChanged');\n        let dailyBudgetRef = userRef.child('dailyBudget');\n        let budgetToDateRef = userRef.child('budgetToDate');\n        let expensesToDateRef = userRef.child('expensesToDate');\n        let transactionsRef = userRef.child('transactions');\n\n        lastDateOpenedRef.on('value', (snapshot) => {\n            //captures the values\n            let lastDateOpened = snapshot.val();\n            this.setState({ lastDateOpened: lastDateOpened })\n        });\n\n        lastDateChangedRef.on('value', (snapshot) => {\n            //captures the values\n            let lastDateChanged = snapshot.val();\n            this.setState({ lastDateChanged: lastDateChanged })\n        });\n\n        dailyBudgetRef.on('value', (snapshot) => {\n            //captures the values\n            let dailyBudget = snapshot.val();\n            this.setState({ dailyBudget: dailyBudget })\n        });\n\n        budgetToDateRef.on('value', (snapshot) => {\n            //captures the values\n            let budgetToDate = snapshot.val();\n            this.setState({ budgetToDate: budgetToDate })\n        });\n\n        expensesToDateRef.on('value', (snapshot) => {\n            //captures the values\n            let expensesToDate = snapshot.val();\n            this.setState({ expensesToDate: expensesToDate })\n        });\n\n        transactionsRef.on('value', (snapshot) => {\n            if (snapshot.exists()) {\n            //captures the values\n            let transactions = snapshot.val();\n\n            //places the values into a local array\n            let localArr = Object.values(transactions)\n            this.setState({ transactions: localArr })\n            }\n        });\n\n        this.calcBudgetToDate()\n    }\n\n    calcBudgetToDate() {\n        let currentUser = this.props.currentUser.displayName;\n        let userRef = firebase.database().ref(currentUser);\n\n        userRef.once(\"value\", snapshot => {\n            let today = new Date();\n            let lastOpened = new Date(this.state.lastDateOpened);\n\n            if (lastOpened.toLocaleDateString() !== today.toLocaleDateString()) {\n\n                /* caluculate days that have passed. I know its ugly. I hate it */\n\n                lastOpened = Date.UTC(lastOpened.getFullYear(), lastOpened.getMonth(), lastOpened.getDate());\n                let present = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())\n                let oneDay = 1000 * 60 * 60 * 24;\n                let days = ((present - oneDay) - lastOpened) / oneDay;\n\n                /* calculates amount to add to budget to date */\n\n                let val = days * Number(this.state.dailyBudget) + Number(this.state.budgetToDate)\n\n                /* firebase */\n                let budgetToDateRef = userRef.child('budgetToDate');\n                let lastDateOpenedRef = userRef.child('lastDateOpened');\n\n                budgetToDateRef.set(val)\n                lastDateOpenedRef.set(today.toLocaleDateString())\n\n                /* state */\n                this.setState({\n                    budgetToDate: val\n                })\n\n                this.setState({\n                    lastDateOpened: today.toLocaleDateString()\n                })\n\n\n            }\n\n        });\n\n    }\n    addTransToApp = (entry) => {\n        let transactions = this.state.transactions\n        transactions.unshift(entry);\n\n        /* Requirement 10 */\n        let sorted = transactions.sort((a, b) => {\n            return Date.parse(b.date) - Date.parse(a.date);\n        });\n        let id = 1;\n        for (let entry of sorted) {\n            entry.id = id;\n            id++;\n        }\n\n        let expensesToDate = Number(this.state.expensesToDate) + Number(entry.amountSpent);\n\n        /* firebase */\n        let currentUser = this.props.currentUser.displayName;\n        let userRef = firebase.database().ref(currentUser);\n\n        let transactionsRef = userRef.child('transactions');\n        transactionsRef.set(sorted)\n\n        let expensesToDateRef = userRef.child('expensesToDate');\n        expensesToDateRef.set(expensesToDate)\n\n        /* state */\n        this.setState({\n            transactions: sorted\n        });        \n        this.setState({\n            expensesToDate: expensesToDate\n        });\n    }\n\n\n    handleBudgetChange = (updates) => {\n        /* firebase */\n        let currentUser = this.state.currentUser.displayName;\n        let userRef = firebase.database().ref(currentUser);\n        let lastDateChangedRef = userRef.child('lastDateChanged');\n        let dailyBudgetRef = userRef.child('dailyBudget');\n\n        lastDateChangedRef.set(updates.lastDateChanged)\n        dailyBudgetRef.set(updates.dailyBudget)\n\n        /* state */\n        this.setState({\n            lastDateChanged: updates.lastDateChanged\n        })\n        this.setState({\n            dailyBudget: updates.dailyBudget\n        })\n    }\n\n\n    render() {\n        //this.calcBudgetToDate()\n        let content = (\n            <div>\n                {/* Beginning of main page */}\n                <div className = 'testcss'>   \n                    <Summary\n                        lastDateChanged={this.state.lastDateChanged}\n                        dailyBudget={this.state.dailyBudget}\n                        budgetToDate={this.state.budgetToDate}\n                        expensesToDate={this.state.expensesToDate}\n                        handleBudgetChange={this.handleBudgetChange}\n                    /* calcBudgetToDate={this.calcBudgetToDate} */\n                    />\n                </div> \n                {/* Beginning of Entry Form */}\n                <EntryForm\n                    addTransToApp={this.addTransToApp}\n                    dailyBudget={this.state.dailyBudget}\n                />\n                {/* End of Entry Form */}\n\n                {/* Beginning of history */}\n\n                {<HistoryCards\n                    transactions={this.state.transactions} />}\n\n                {/* End of main page */}\n\n            </div>\n        )\n        return (content)\n    }\n\n}"]},"metadata":{},"sourceType":"module"}