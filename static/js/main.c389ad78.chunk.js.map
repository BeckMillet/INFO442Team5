{"version":3,"sources":["Summary.js","EntryForm.js","HistoryItem.js","HistoryCards.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Summary","props","validate","isError","errors","state","updateDailyBudget","dailyBudgetError","amountError","setState","handleSubmit","event","preventDefault","newDateChanged","Date","rounded","Number","toFixed","handleBudgetChange","lastDateChanged","toLocaleDateString","dailyBudget","showHideButton","button","Button","type","className","showHideUpdate","fieldChange","bind","elem","newState","currentTarget","name","value","this","month","Array","overallBalance","budgetToDate","expensesToDate","today","calcMonthName","getMonth","getDate","getFullYear","placeholder","toString","Jumbotron","onSubmit","noValidate","Row","Card","CardTitle","TextField","variant","required","error","length","helperText","onChange","InputProps","startAdornment","InputAdornment","position","CardSubtitle","Component","EntryForm","entryAmount","entryName","nameError","formDate","entryDate","substring","addTransToApp","id","amountSpent","date","itemName","year","day","content","getToday","label","defaultValue","InputLabelProps","shrink","Container","HistoryItem","formatAmountSpent","toggleButtons","evt","buttonsAreHidden","handleClickOutside","Col","sm","md","size","offset","onClick","CardText","entryId","removeTransToApp","RemovalButtons","doRemove","onClickOutside","HistoryCards","console","log","transactions","renderedEntries","Object","keys","map","eachEntry","key","Main","entry","unshift","updateFirebaseTrans","sorted","sort","a","b","parse","currentUser","displayName","userRef","firebase","database","ref","child","set","splice","updates","lastDateChangedRef","dailyBudgetRef","lastDateOpened","lastDateOpenedRef","budgetToDateRef","expensesToDateRef","transactionsRef","on","snapshot","val","exists","localArr","values","calcBudgetToDate","once","lastOpened","UTC","App","uiConfig","signInOptions","provider","auth","EmailAuthProvider","PROVIDER_ID","requireDisplayName","GoogleAuthProvider","credentialHelper","signInFlow","handleSignOut","errorMessage","signOut","handleNewUser","user","loading","onAuthStateChanged","firebaseUser","aria-label","firebaseAuth","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c389ad78.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Card, CardTitle, Row, Jumbotron, CardSubtitle } from 'reactstrap';\r\nimport 'firebase/database';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n// import PropTypes from \"prop-types\";\r\n// import { withStyles } from \"@material-ui/core/styles\";\r\n\r\n// const styles = {\r\n//   root: {\r\n//     background: \"black\"\r\n//   },\r\n//   input: {\r\n//     color: \"white\"\r\n//   }\r\n// };\r\n\r\n\r\nexport default class Summary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      updateDailyBudget: '',\r\n      dailyBudgetError: \"\",\r\n      showHideUpdate: false,\r\n    };\r\n    this.fieldChange = this.fieldChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n\r\n  fieldChange(elem) {\r\n    const newState = {};\r\n    newState[elem.currentTarget.name] = elem.currentTarget.value;\r\n    this.setState(newState);\r\n  }\r\n\r\n  validate = () => {\r\n    let isError = false;\r\n    let errors = {}\r\n\r\n    if (this.state.updateDailyBudget <= 0) {\r\n      isError = true;\r\n      errors.dailyBudgetError = 'Must be positive and non-zero'\r\n    } else {\r\n      isError = false;\r\n      errors.amountError = ''\r\n    }\r\n\r\n    if (isError) {\r\n      this.setState({\r\n        ...this.state,\r\n        ...errors\r\n      })\r\n    }\r\n\r\n    return isError;\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let err = this.validate();\r\n    if (!err) {\r\n      let newDateChanged = new Date();\r\n      let rounded = Number(this.state.updateDailyBudget).toFixed(2)\r\n      this.props.handleBudgetChange({\r\n        lastDateChanged: newDateChanged.toLocaleDateString(),\r\n        dailyBudget: rounded\r\n      })\r\n\r\n      /* resets the form content */\r\n      this.setState({\r\n        updateDailyBudget: '',\r\n        dailyBudgetError: \"\"\r\n      })\r\n    }\r\n  }\r\n\r\n  showHideButton = () => {\r\n    let button;\r\n    if (this.props.dailyBudget === 0) {\r\n      button = (\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"btn primary\">\r\n          Add your daily budget\r\n        </Button>\r\n      )\r\n    }\r\n    if (this.state.updateDailyBudget !== '' & this.props.dailyBudget !== 0) {\r\n      button = (\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"btn\">\r\n          Update!\r\n        </Button>\r\n      )\r\n    }\r\n\r\n    return button\r\n  }\r\n\r\n  calcMonthName() {\r\n    let month = new Array(12);\r\n    month[0] = \"January\";\r\n    month[1] = \"February\";\r\n    month[2] = \"March\";\r\n    month[3] = \"April\";\r\n    month[4] = \"May\";\r\n    month[5] = \"June\";\r\n    month[6] = \"July\";\r\n    month[7] = \"August\";\r\n    month[8] = \"September\";\r\n    month[9] = \"October\";\r\n    month[10] = \"November\";\r\n    month[11] = \"December\";\r\n\r\n    return month;\r\n  }\r\n\r\n  render() {\r\n    let overallBalance = Number(this.props.budgetToDate) + Number(this.props.dailyBudget) - Number(this.props.expensesToDate);\r\n    overallBalance = Number(overallBalance).toFixed(2);\r\n\r\n    let today = new Date();\r\n    let month = this.calcMonthName()\r\n    today = month[today.getMonth()] + \" \" + today.getDate() + \", \" + today.getFullYear()\r\n\r\n    let placeholder = 0\r\n    if (this.props.dailyBudget != null) {\r\n      placeholder = this.props.dailyBudget.toString()\r\n    }\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Jumbotron>\r\n          <div className=\"date\">\r\n            {today}\r\n          </div>\r\n          <form onSubmit={this.handleSubmit} noValidate>\r\n            <Row className='head'>\r\n\r\n              <Card className='col-6 budget'>\r\n                <CardTitle className=\"budgetTitle\">Daily Budget:\r\n                     <TextField\r\n                    type=\"number\"\r\n                    name=\"updateDailyBudget\"\r\n                    variant=\"outlined\"\r\n                    placeholder={placeholder}\r\n                    required\r\n                    error={this.state.dailyBudgetError.length === 0 ? false : true}\r\n                    helperText={this.state.dailyBudgetError}\r\n                    value={this.state.updateDailyBudget}\r\n                    onChange={this.fieldChange}\r\n\r\n                    InputProps={{\r\n\r\n                      startAdornment: (\r\n                        <InputAdornment className=\"\" position=\"start\">\r\n                          $\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </CardTitle>\r\n              </Card>\r\n\r\n\r\n              <Card className='col-6 balance'>\r\n                <CardTitle>Overall Balance:</CardTitle>\r\n                <CardSubtitle className='balanceSub'>${overallBalance}</CardSubtitle>\r\n              </Card>\r\n\r\n            </Row>\r\n            {this.showHideButton()}\r\n          </form>\r\n        </Jumbotron>\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Container, Row } from 'reactstrap';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nexport default class EntryForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      entryAmount: '',\r\n      amountError: \"\",\r\n      entryDate: '',\r\n      entryName: '',\r\n      nameError: \"\"\r\n    };\r\n    this.fieldChange = this.fieldChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  fieldChange(elem) {\r\n    const newState = {};\r\n    newState[elem.currentTarget.name] = elem.currentTarget.value;\r\n    this.setState(newState);\r\n  }\r\n\r\n  validate = () => {\r\n    let isError = false;\r\n    let errors = {}\r\n    \r\n    if (this.state.entryAmount < .01) {\r\n      isError = true;\r\n      errors.amountError = 'Must be positive and non-zero'\r\n    } else {\r\n      errors.amountError = ''\r\n    }\r\n\r\n    if (this.state.entryName === \"\") {\r\n      isError = true;\r\n      errors.nameError = 'Required!'\r\n    } else if (this.state.entryName.length > 24) {\r\n      isError = true;\r\n      errors.nameError = 'must be less than 25 char'\r\n    }else {\r\n      errors.nameError = ''\r\n    }\r\n    \r\n    if (isError) {\r\n      this.setState({\r\n        ...this.state,\r\n        ...errors\r\n      })\r\n    }\r\n\r\n    return isError;\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let err = this.validate();\r\n    if (!err) {\r\n      let formDate = this.state.entryDate;\r\n      if (formDate === '') {\r\n        /* requirement 9 */\r\n        formDate = new Date();\r\n      } else {\r\n        /* requirement 8 */\r\n        formDate = formDate.substring(5, 10) + \"-\" + formDate.substring(0, 4)\r\n        formDate = new Date(formDate);\r\n      };\r\n      this.props.addTransToApp({\r\n        id: 0,\r\n        amountSpent: Number(this.state.entryAmount).toFixed(2).toString(),\r\n        date: formDate.toLocaleDateString(),\r\n        itemName: this.state.entryName\r\n      })\r\n\r\n      /* resets the form content */\r\n      this.setState({\r\n        entryAmount: '',\r\n        entryName: '',\r\n        amountError: \"\",\r\n        nameError: \"\"\r\n      })\r\n    }\r\n  }\r\n\r\n  getToday() {\r\n    let today = new Date()\r\n    let year = today.getFullYear().toString()\r\n    let month = today.getMonth() + 1\r\n    if (month < 10) {\r\n      month = month.toString()\r\n      month = \"0\" + month\r\n    } else {\r\n      month = month.toString()\r\n    }\r\n    let day = today.getDate().toString()\r\n    if (day < 10) {\r\n      day = day.toString()\r\n      day = \"0\" + day\r\n    } else {\r\n      day = day.toString()\r\n    }\r\n\r\n    return year + \"-\" + month + \"-\" + day\r\n  }\r\n\r\n  render() {\r\n    let today = this.getToday()\r\n    let content;\r\n\r\n    if (this.props.dailyBudget !== 0) {\r\n      content = (\r\n        <form onSubmit={this.handleSubmit} className=\"\" noValidate>\r\n          \r\n\r\n          <TextField\r\n            required\r\n            id=\"standard-required entryFormItemName\"\r\n            name=\"entryName\"\r\n            className=\"itemform\"\r\n            value={this.state.entryName}\r\n            placeholder=\"Item Name\"\r\n            onChange={this.fieldChange}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            error={this.state.nameError.length === 0 ? false : true}\r\n            helperText={this.state.nameError}\r\n          />\r\n\r\n          <TextField\r\n            name=\"entryAmount\"\r\n            id=\"standard-required\"\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            className=\"amountform\"\r\n            value={this.state.entryAmount}\r\n            error={this.state.amountError.length === 0 ? false : true}\r\n            helperText={this.state.amountError}\r\n            onChange={this.fieldChange}\r\n            placeholder=\"Amount\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  $\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          <TextField\r\n            id=\"entryFormDate\"\r\n            name=\"entryDate\"\r\n            label=\"\"\r\n            variant=\"outlined\"\r\n            onChange={this.fieldChange}\r\n            type=\"date\"\r\n            className=\"dateform\"\r\n            defaultValue={today}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          <Row className=\"submitbuttonrow\">\r\n            <Button \r\n              type=\"submit\" \r\n              variant=\"outlined\" \r\n              className=\"submitbutton\">\r\n                Submit\r\n            </Button>\r\n          </Row>\r\n        </form>\r\n      )\r\n    } else {\r\n      content = (\r\n        <div>\r\n          To get started, add your daily budget in the form above!\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n      <div className=\"transactionBanner\">\r\n        ENTER TRANSACTION\r\n        </div>\r\n        <Container className=\"form\">\r\n        {content}\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { Card, CardTitle, CardSubtitle, CardText, Row, Col } from 'reactstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport onClickOutside from 'react-onclickoutside'\r\n\r\nclass HistoryItem extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        buttonsAreHidden: false,\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.setState({\r\n        buttonsAreHidden: true\r\n      })\r\n    }\r\n  \r\n  \r\n    formatAmountSpent = (amountSpent) => {\r\n      amountSpent = Number(amountSpent).toFixed(2)\r\n      amountSpent = \"$\" + amountSpent\r\n  \r\n      return amountSpent\r\n    }\r\n  \r\n    toggleButtons = (evt) => {  //click handlier\r\n      this.setState({\r\n        buttonsAreHidden: !this.state.buttonsAreHidden\r\n      })\r\n    };\r\n\r\n    handleClickOutside = evt => {\r\n      this.setState({\r\n        buttonsAreHidden: true\r\n      })\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <Row>\r\n            {/* offset wont create distance */}\r\n  \r\n            <Col className=\"cardcol\" sm=\"12\" md={{ size: 6, offset: 5 }}>\r\n              <Card className=\"shadow-sm bg-white rounded history\" onClick={this.toggleButtons} >\r\n                <Row>\r\n                  <CardTitle className=\"col-7 historytitle\"> {this.props.itemName} </CardTitle>\r\n                  <CardText className=\"col-5 historyamount\">{this.formatAmountSpent(this.props.amountSpent)} </CardText>\r\n                </Row>\r\n                <Col>\r\n                  <CardSubtitle className=\"historydate\"> {this.props.date} </CardSubtitle>\r\n                </Col>\r\n              </Card>\r\n            </Col>\r\n            <RemovalButtons\r\n              entryId={this.props.id}\r\n              amountSpent={this.props.amountSpent}\r\n              buttonsAreHidden={this.state.buttonsAreHidden}\r\n              removeTransToApp={this.props.removeTransToApp}\r\n              toggleButtons={this.toggleButtons}\r\n            />\r\n          </Row>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  class RemovalButtons extends Component {\r\n  \r\n    doRemove = (evt) => {\r\n      this.props.removeTransToApp({\r\n        entryId: this.props.entryId,\r\n        amountSpent: this.props.amountSpent\r\n      })\r\n      this.props.toggleButtons()\r\n    }\r\n  \r\n    render() {\r\n      let content = \"\";\r\n  \r\n      if (!this.props.buttonsAreHidden) {\r\n        content = (\r\n          <div>\r\n            <Button\r\n              onClick={this.doRemove}\r\n              variant=\"outlined\"\r\n              className=\"removebutton\">\r\n              Remove\r\n          </Button>\r\n          </div>)\r\n  \r\n      }\r\n  \r\n      return content\r\n    }\r\n  }\r\n  \r\n  export default onClickOutside(HistoryItem);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Container } from 'reactstrap';\r\nimport 'firebase/database';\r\n\r\nimport HistoryItem from './HistoryItem'\r\n\r\n\r\nexport default class HistoryCards extends Component {\r\n\r\n  handleClickOutside = () => {\r\n    console.log('onClickOutside() method called')\r\n  }\r\n  \r\n  render() {\r\n    let transactions = this.props.transactions\r\n    let renderedEntries = \"Looks like you haven't added any transactions!\"\r\n\r\n    if (Object.keys(transactions).length > 0) {\r\n      renderedEntries = transactions.map((eachEntry) => {\r\n\r\n        return (\r\n          <HistoryItem\r\n            key={eachEntry.id}\r\n            id={eachEntry.id}\r\n            itemName={eachEntry.itemName}\r\n            amountSpent={eachEntry.amountSpent}\r\n            date={eachEntry.date}\r\n            removeTransToApp={this.props.removeTransToApp}\r\n          />\r\n        )\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"activityBanner\">LATEST ACTIVITY</div>\r\n        <Container className=\"historyContainer\">\r\n          {renderedEntries}\r\n        </Container>\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport Summary from './Summary'\r\nimport EntryForm from './EntryForm'\r\nimport HistoryCards from './HistoryCards'\r\nimport firebase from 'firebase/app';\r\n\r\nimport 'firebase/database';\r\n\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentUser: null,\r\n            lastDateChanged: '',\r\n            lastDateOpened: '',\r\n            dailyBudget: '',\r\n            budgetToDate: '',\r\n            expensesToDate: '',\r\n            transactions: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currentUser = this.props.currentUser;\r\n        this.setState({ currentUser: currentUser })\r\n\r\n        let userRef = firebase.database().ref(currentUser.displayName);\r\n        let lastDateOpenedRef = userRef.child('lastDateOpened');\r\n        let lastDateChangedRef = userRef.child('lastDateChanged');\r\n        let dailyBudgetRef = userRef.child('dailyBudget');\r\n        let budgetToDateRef = userRef.child('budgetToDate');\r\n        let expensesToDateRef = userRef.child('expensesToDate');\r\n        let transactionsRef = userRef.child('transactions');\r\n\r\n        lastDateOpenedRef.on('value', (snapshot) => {\r\n            //captures the values\r\n            let lastDateOpened = snapshot.val();\r\n            this.setState({ lastDateOpened: lastDateOpened })\r\n        });\r\n\r\n        lastDateChangedRef.on('value', (snapshot) => {\r\n            //captures the values\r\n            let lastDateChanged = snapshot.val();\r\n            this.setState({ lastDateChanged: lastDateChanged })\r\n        });\r\n\r\n        dailyBudgetRef.on('value', (snapshot) => {\r\n            //captures the values\r\n            let dailyBudget = snapshot.val();\r\n            this.setState({ dailyBudget: dailyBudget })\r\n        });\r\n\r\n        budgetToDateRef.on('value', (snapshot) => {\r\n            //captures the values\r\n            let budgetToDate = snapshot.val();\r\n            this.setState({ budgetToDate: budgetToDate })\r\n        });\r\n\r\n        expensesToDateRef.on('value', (snapshot) => {\r\n            //captures the values\r\n            let expensesToDate = snapshot.val();\r\n            this.setState({ expensesToDate: expensesToDate })\r\n        });\r\n\r\n        transactionsRef.on('value', (snapshot) => {\r\n            if (snapshot.exists()) {\r\n                //captures the values\r\n                let transactions = snapshot.val();\r\n\r\n                //places the values into a local array\r\n                let localArr = Object.values(transactions)\r\n                this.setState({ transactions: localArr })\r\n            }\r\n        });\r\n\r\n        this.calcBudgetToDate()\r\n    }\r\n\r\n    calcBudgetToDate() {\r\n        let currentUser = this.props.currentUser.displayName;\r\n        let userRef = firebase.database().ref(currentUser);\r\n\r\n        userRef.once(\"value\", snapshot => {\r\n            if (snapshot.exists()) {\r\n                let today = new Date();\r\n                let lastOpened = new Date(this.state.lastDateOpened);\r\n\r\n                if (lastOpened.toLocaleDateString() !== today.toLocaleDateString()) {\r\n\r\n                    /* caluculate days that have passed. I know its ugly. I hate it */\r\n\r\n                    lastOpened = Date.UTC(lastOpened.getFullYear(), lastOpened.getMonth(), lastOpened.getDate());\r\n                    let present = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())\r\n                    let oneDay = 1000 * 60 * 60 * 24;\r\n                    let days = ((present - oneDay) - lastOpened) / oneDay;\r\n\r\n                    /* calculates amount to add to budget to date */\r\n\r\n                    let val = days * Number(this.state.dailyBudget) + Number(this.state.budgetToDate)\r\n                    val = val.toFixed(2);\r\n\r\n                    /* firebase */\r\n                    let budgetToDateRef = userRef.child('budgetToDate');\r\n                    let lastDateOpenedRef = userRef.child('lastDateOpened');\r\n\r\n                    budgetToDateRef.once(\"value\", snapshot => {\r\n                        if (snapshot.exists()) {\r\n                            budgetToDateRef.set(val)\r\n                        }\r\n                        else {\r\n                        }\r\n                    });\r\n                    lastDateOpenedRef.once(\"value\", snapshot => {\r\n                        if (snapshot.exists()) {\r\n                            lastDateOpenedRef.set(today.toLocaleDateString())\r\n                        }\r\n                        else {\r\n                        }\r\n                    });\r\n\r\n\r\n                    /* state */\r\n                    this.setState({\r\n                        budgetToDate: val\r\n                    })\r\n\r\n                    this.setState({\r\n                        lastDateOpened: today.toLocaleDateString()\r\n                    })\r\n\r\n\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    addTransToApp = (entry) => {\r\n        let transactions = this.state.transactions\r\n        transactions.unshift(entry);\r\n        let expensesToDate = Number(this.state.expensesToDate) + Number(entry.amountSpent);\r\n        expensesToDate = expensesToDate.toFixed(2);\r\n        \r\n        this.updateFirebaseTrans(transactions, expensesToDate)\r\n    }\r\n\r\n    updateFirebaseTrans = (transactions, expensesToDate) => {\r\n        /* Requirement 10 */\r\n        let sorted = transactions.sort((a, b) => {\r\n            return Date.parse(b.date) - Date.parse(a.date);\r\n        });\r\n        let id = 1;\r\n        for (let entry of sorted) {\r\n            entry.id = id;\r\n            id++;\r\n        }\r\n\r\n\r\n\r\n        /* firebase */\r\n        let currentUser = this.props.currentUser.displayName;\r\n        let userRef = firebase.database().ref(currentUser);\r\n\r\n        let transactionsRef = userRef.child('transactions');\r\n        transactionsRef.set(sorted)\r\n\r\n        let expensesToDateRef = userRef.child('expensesToDate');\r\n        expensesToDateRef.set(expensesToDate)\r\n\r\n        /* state */\r\n        this.setState({\r\n            transactions: sorted\r\n        });\r\n        this.setState({\r\n            expensesToDate: expensesToDate\r\n        });\r\n    }\r\n\r\n    removeTransToApp = (entry) => {\r\n        let transactions = this.state.transactions\r\n        transactions.splice(entry.entryId - 1, 1);\r\n        let expensesToDate = Number(this.state.expensesToDate) - Number(entry.amountSpent);\r\n        expensesToDate.toFixed(2);\r\n\r\n        this.updateFirebaseTrans(transactions, expensesToDate)\r\n\r\n    }\r\n\r\n    handleBudgetChange = (updates) => {\r\n        /* firebase */\r\n        let currentUser = this.state.currentUser.displayName;\r\n        let userRef = firebase.database().ref(currentUser);\r\n        let lastDateChangedRef = userRef.child('lastDateChanged');\r\n        let dailyBudgetRef = userRef.child('dailyBudget');\r\n\r\n        lastDateChangedRef.set(updates.lastDateChanged)\r\n        dailyBudgetRef.set(updates.dailyBudget)\r\n\r\n        /* state */\r\n        this.setState({\r\n            lastDateChanged: updates.lastDateChanged\r\n        })\r\n        this.setState({\r\n            dailyBudget: updates.dailyBudget\r\n        })\r\n    }\r\n\r\n    \r\n    render() {\r\n        \r\n    \r\n        let content = (\r\n            <div>\r\n\r\n                <Summary\r\n                    lastDateChanged={this.state.lastDateChanged}\r\n                    dailyBudget={this.state.dailyBudget}\r\n                    budgetToDate={this.state.budgetToDate}\r\n                    expensesToDate={this.state.expensesToDate}\r\n                    handleBudgetChange={this.handleBudgetChange}\r\n                /* calcBudgetToDate={this.calcBudgetToDate} */\r\n                />\r\n\r\n                <EntryForm\r\n                    addTransToApp={this.addTransToApp}\r\n                    dailyBudget={this.state.dailyBudget}\r\n                />\r\n\r\n                {<HistoryCards\r\n                    transactions={this.state.transactions}\r\n                    removeTransToApp={this.removeTransToApp}\r\n                />}\r\n\r\n            </div>\r\n        )\r\n        return (content)\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport Main from './Main'\r\n\r\nimport StyledFirebaseAuth from '../node_modules/react-firebaseui/StyledFirebaseAuth';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport { Row } from 'reactstrap';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: null,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n\r\n  uiConfig = {\r\n    signInOptions: [{\r\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n      requireDisplayName: true\r\n    },\r\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\r\n    ],\r\n    credentialHelper: 'none',\r\n    signInFlow: 'popup'\r\n  }\r\n\r\n  componentDidMount() {\r\n    firebase.auth().onAuthStateChanged((firebaseUser) => {\r\n      this.setState({ loading: false });\r\n      this.setState({ user: firebaseUser });\r\n    })\r\n\r\n    /* let currentUser = this.state.user.displayName;\r\n    let userRef = firebase.database().ref(currentUser);\r\n\r\n    let lastDateOpenedRef = userRef.child('lastDateOpened');\r\n    let dailyBudgetRef = userRef.child('dailyBudget');\r\n    let budgetToDateRef = userRef.child('budgetToDate');\r\n    let expensesToDateRef = userRef.child('expensesToDate');\r\n    let transactionsRef = userRef.child('transactions');\r\n     */\r\n\r\n    /* TODO delete sample data */\r\n    /* this.setState({\r\n      transactions: SAMPLE_TRANSACTIONS.transactions\r\n    })\r\n    this.setState({\r\n      dailyBudget: 25\r\n    })\r\n    this.setState({\r\n      lastDateChanged: '4/20/2020'\r\n    })\r\n    this.setState({\r\n      expensesToDate: 79.36\r\n    })\r\n\r\n    this.setState({\r\n      budgetToDate: 100\r\n    })\r\n\r\n    this.setState({\r\n      lastDateOpened: new Date('4/23/2020')\r\n    }) */\r\n\r\n  }\r\n\r\n  /* firebase */\r\n  handleSignOut = () => {\r\n    this.setState({ errorMessage: null });\r\n    firebase.auth().signOut();\r\n  }\r\n\r\n\r\n\r\n  handleNewUser = () => {\r\n    let currentUser = this.state.user.displayName;\r\n    let userRef = firebase.database().ref(currentUser);\r\n\r\n    let lastDateOpenedRef = userRef.child('lastDateOpened');\r\n    let dailyBudgetRef = userRef.child('dailyBudget');\r\n    let budgetToDateRef = userRef.child('budgetToDate');\r\n    let expensesToDateRef = userRef.child('expensesToDate');\r\n    //let transactionsRef = userRef.child('transactions');\r\n\r\n    let today = new Date();\r\n    today = today.toLocaleDateString()\r\n\r\n\r\n    userRef.once(\"value\", snapshot => {\r\n      if (!snapshot.exists()) {\r\n        //constructs the schema for new users\r\n        lastDateOpenedRef.set(today)\r\n        dailyBudgetRef.set(0)\r\n        /* transactionsRef.push(\r\n          {\r\n            \"id\": 1,\r\n            \"amountSpent\": 0,\r\n            \"itemName\": \"Sample Transaction!\",\r\n            \"date\": today\r\n          }) */\r\n        budgetToDateRef.set(0)\r\n        expensesToDateRef.set(0)\r\n        //future iterations will allow users to create and modify a 'tag' list for categorization. Sample below\r\n        /* let defaultTagList = [\"food\", \"fitness\", \"social\", \"hobbies\", \"gas\", \"parking\"]\r\n        tagListRef.set(defaultTagList) */\r\n      }\r\n      else {\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    let content = null;\r\n    /* firebase userauth */\r\n    if (this.state.loading) {\r\n      content = (\r\n        <div className=\"text-center\">\r\n          <i className=\"fa fa-spinner fa-spin fa-3x\" aria-label=\"Connecting...\"></i>\r\n        </div>\r\n      );\r\n    } else if (!this.state.user) {\r\n      content = (\r\n        <div className=\"container\">\r\n          <h1>Sign In</h1>\r\n          <StyledFirebaseAuth\r\n            uiConfig={this.uiConfig}\r\n            firebaseAuth={firebase.auth()} />\r\n        </div>\r\n      );\r\n    } else {\r\n      this.handleNewUser()\r\n      content = (\r\n        <div>\r\n          <Main currentUser={this.state.user} />\r\n          <Row className=\"logoutbuttonrow\">\r\n            <button className=\"btn logoutbutton\" onClick={this.handleSignOut}>\r\n              LOG OUT\r\n            </button>\r\n          </Row>\r\n        </div>\r\n      )\r\n    }\r\n    return (content);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBeBjtmzMFaaWS2r5dKsrvkatUZQ2KpqC8\",\r\n  authDomain: \"sprout-4f5e8.firebaseapp.com\",\r\n  databaseURL: \"https://sprout-4f5e8.firebaseio.com\",\r\n  projectId: \"sprout-4f5e8\",\r\n  storageBucket: \"sprout-4f5e8.appspot.com\",\r\n  messagingSenderId: \"1077727576738\",\r\n  appId: \"1:1077727576738:web:7b3754d05af02a90b28dfb\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}